import abc
from enum import Enum

class IService(abc.ABC): ...

class IEntity(abc.ABC, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def id(self): ...
    def __eq__(self, entity) -> bool: ...

class IRootEntity(IEntity, metaclass=abc.ABCMeta): ...

class IValueObject(abc.ABC, metaclass=abc.ABCMeta):
    def __setattr__(self, __name, __value) -> None: ...
    @abc.abstractmethod
    def __eq__(self, value_object) -> bool: ...

class ILoadRepository(IService, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def load(self, *args, **kwargs) -> IRootEntity: ...

class ISaveRepository(IService, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def save(self, entity: IRootEntity): ...

class IRepository(ILoadRepository, ISaveRepository, metaclass=abc.ABCMeta): ...
class IFactory(abc.ABC): ...

class IBuilder(IFactory, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def build(self): ...

class IDomainService(IService): ...
class DomainEventType(Enum): ...

class IDomainEvent(abc.ABC, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def type(self): ...

class IApplicationService(IService): ...
class IInfrastructureService(IService): ...
class IUnitOfWork(abc.ABC): ...
class ISpecification(abc.ABC): ...
class IPolicy(abc.ABC): ...
class ICommandHandler(abc.ABC): ...
class IQueryHandler(abc.ABC): ...
